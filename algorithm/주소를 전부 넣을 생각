from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

def wait_for_results(driver):
    try:
        # 검색 결과가 나타날 때까지 기다림
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.CLASS_NAME, 'PlaceItem'))
        )
    except Exception as e:
        print("Timeout: 검색 결과가 나타나지 않았습니다.", e)

# 예시 데이터베이스 (리스트로 구현)
database = [
    {"id": 1, "address": "", "tags": [""], "rating": 0.0},
    {"id": 2, "address": "", "tags": [""], "rating": 0.0},
    {"id": 3, "address": "", "tags": [""], "rating": 0.0},
    {"id": 4, "address": "", "tags": [""], "rating": 0.0},
    {"id": 5, "address": "", "tags": [""], "rating": 0.0},
    {"id": 6, "address": "", "tags": [""], "rating": 0.0},
    {"id": 7, "address": "", "tags": [""], "rating": 0.0},
    {"id": 8, "address": "", "tags": [""], "rating": 0.0},
    {"id": 9, "address": "", "tags": [""], "rating": 0.0},
    {"id": 10, "address": "", "tags": [""], "rating": 0.0},
    {"id": 11, "address": "", "tags": [""], "rating": 0.0},
    {"id": 12, "address": "", "tags": [""], "rating": 0.0},
    {"id": 13, "address": "", "tags": [""], "rating": 0.0},
    {"id": 14, "address": "", "tags": [""], "rating": 0.0},
    {"id": 15, "address": "", "tags": [""], "rating": 0.0},
    {"id": 16, "address": "", "tags": [""], "rating": 0.0},
    {"id": 17, "address": "", "tags": [""], "rating": 0.0},
    {"id": 18, "address": "", "tags": [""], "rating": 0.0},
    {"id": 19, "address": "", "tags": [""], "rating": 0.0},
    {"id": 20, "address": "", "tags": [""], "rating": 0.0},
    {"id": 21, "address": "", "tags": [""], "rating": 0.0},
    {"id": 22, "address": "", "tags": [""], "rating": 0.0},
    {"id": 23, "address": "", "tags": [""], "rating": 0.0},
    {"id": 24, "address": "", "tags": [""], "rating": 0.0},
    {"id": 25, "address": "", "tags": [""], "rating": 0.0},  
    {"id": 26, "address": "", "tags": [""], "rating": 0.0},
    {"id": 27, "address": "", "tags": [""], "rating": 0.0},
    {"id": 28, "address": "", "tags": [""], "rating": 0.0},
    {"id": 29, "address": "", "tags": [""], "rating": 0.0},
    {"id": 30, "address": "", "tags": [""], "rating": 0.0},
    {"id": 31, "address": "", "tags": [""], "rating": 0.0},
    {"id": 32, "address": "", "tags": [""], "rating": 0.0},
    {"id": 33, "address": "", "tags": [""], "rating": 0.0},
    {"id": 34, "address": "", "tags": [""], "rating": 0.0},
    {"id": 35, "address": "", "tags": [""], "rating": 0.0},
    {"id": 36, "address": "", "tags": [""], "rating": 0.0},
    {"id": 37, "address": "", "tags": [""], "rating": 0.0},
    {"id": 38, "address": "", "tags": [""], "rating": 0.0},
    {"id": 39, "address": "", "tags": [""], "rating": 0.0},
    {"id": 40, "address": "", "tags": [""], "rating": 0.0},
    {"id": 41, "address": "", "tags": [""], "rating": 0.0},
    {"id": 42, "address": "", "tags": [""], "rating": 0.0},
    {"id": 43, "address": "", "tags": [""], "rating": 0.0},
    {"id": 44, "address": "", "tags": [""], "rating": 0.0},
    {"id": 45, "address": "", "tags": [""], "rating": 0.0},
    {"id": 46, "address": "", "tags": [""], "rating": 0.0},
    {"id": 47, "address": "", "tags": [""], "rating": 0.0},
    {"id": 48, "address": "", "tags": [""], "rating": 0.0},
    {"id": 49, "address": "", "tags": [""], "rating": 0.0},
    {"id": 50, "address": "", "tags": [""], "rating": 0.0}, 
    {"id": 51, "address": "", "tags": [""], "rating": 0.0},
    {"id": 52, "address": "", "tags": [""], "rating": 0.0},
    {"id": 53, "address": "", "tags": [""], "rating": 0.0},
    {"id": 54, "address": "", "tags": [""], "rating": 0.0},
    {"id": 55, "address": "", "tags": [""], "rating": 0.0},
    {"id": 56, "address": "", "tags": [""], "rating": 0.0},
    {"id": 57, "address": "", "tags": [""], "rating": 0.0},
    {"id": 58, "address": "", "tags": [""], "rating": 0.0},
    {"id": 59, "address": "", "tags": [""], "rating": 0.0},
    {"id": 60, "address": "", "tags": [""], "rating": 0.0},
    {"id": 61, "address": "", "tags": [""], "rating": 0.0},
    {"id": 62, "address": "", "tags": [""], "rating": 0.0},
    {"id": 63, "address": "", "tags": [""], "rating": 0.0},
    {"id": 64, "address": "", "tags": [""], "rating": 0.0},
    {"id": 65, "address": "", "tags": [""], "rating": 0.0},
    {"id": 66, "address": "", "tags": [""], "rating": 0.0},
    {"id": 67, "address": "", "tags": [""], "rating": 0.0},
    {"id": 68, "address": "", "tags": [""], "rating": 0.0},
    {"id": 69, "address": "", "tags": [""], "rating": 0.0},
    {"id": 70, "address": "", "tags": [""], "rating": 0.0},
    {"id": 71, "address": "", "tags": [""], "rating": 0.0},
    {"id": 72, "address": "", "tags": [""], "rating": 0.0},
    {"id": 73, "address": "", "tags": [""], "rating": 0.0},
    {"id": 74, "address": "", "tags": [""], "rating": 0.0},
    {"id": 75, "address": "", "tags": [""], "rating": 0.0},
    {"id": 76, "address": "", "tags": [""], "rating": 0.0},
    {"id": 77, "address": "", "tags": [""], "rating": 0.0},
    {"id": 78, "address": "", "tags": [""], "rating": 0.0},
    {"id": 79, "address": "", "tags": [""], "rating": 0.0},
    {"id": 80, "address": "", "tags": [""], "rating": 0.0},
    {"id": 81, "address": "", "tags": [""], "rating": 0.0},
    {"id": 82, "address": "", "tags": [""], "rating": 0.0},
    {"id": 83, "address": "", "tags": [""], "rating": 0.0},
    {"id": 84, "address": "", "tags": [""], "rating": 0.0},
    {"id": 85, "address": "", "tags": [""], "rating": 0.0},
    {"id": 86, "address": "", "tags": [""], "rating": 0.0},
    {"id": 87, "address": "", "tags": [""], "rating": 0.0},
    {"id": 88, "address": "", "tags": [""], "rating": 0.0},
    {"id": 89, "address": "", "tags": [""], "rating": 0.0},
    {"id": 90, "address": "", "tags": [""], "rating": 0.0},
    {"id": 91, "address": "", "tags": [""], "rating": 0.0},
    {"id": 92, "address": "", "tags": [""], "rating": 0.0},
    {"id": 93, "address": "", "tags": [""], "rating": 0.0},
    {"id": 94, "address": "", "tags": [""], "rating": 0.0},
    {"id": 95, "address": "", "tags": [""], "rating": 0.0},
    {"id": 96, "address": "", "tags": [""], "rating": 0.0},
    {"id": 97, "address": "", "tags": [""], "rating": 0.0},
    {"id": 98, "address": "", "tags": [""], "rating": 0.0},
    {"id": 99, "address": "", "tags": [""], "rating": 0.0},
    {"id": 100, "address": "", "tags": [""], "rating": 0.0}
]

# 특정 태그가 포함된 항목을 필터링
def filter_by_tag(tag):
    return [entry for entry in database if tag in entry["tags"]]

# 평점 순으로 정렬 후 상위 10개 항목 반환
def get_top_rated_addresses(filtered_addresses):
    return sorted(filtered_addresses, key=lambda x: x["rating"], reverse=True)[:10]

# 태그를 기준으로 검색할 주소 목록을 필터링
search_tag = input("검색할 태그를 입력하세요: ")
filtered_addresses = filter_by_tag(search_tag)

if not filtered_addresses:
    print(f"'{search_tag}' 태그를 가진 항목이 없습니다.")
else:
    top_addresses = get_top_rated_addresses(filtered_addresses)
    # 필터링된 결과 출력
    print(f"'{search_tag}' 태그를 가진 주소 목록 (평점 순 상위 10개):")
    for entry in top_addresses:
        print(f"ID: {entry['id']}, Address: {entry['address']}, Tags: {', '.join(entry['tags'])}, Rating: {entry['rating']}")

    search_id = int(input("검색할 주소의 ID를 입력하세요: "))
    search_address = next((entry["address"] for entry in top_addresses if entry["id"] == search_id), None)


    if search_address is None:
        print("해당 ID에 대한 주소를 찾을 수 없습니다.")
    else:
        driver = webdriver.Chrome()

        # 지도 페이지 열기
        driver.get('https://map.kakao.com/')
        time.sleep(3)

        # 검색창에 검색어 입력
        search_box = driver.find_element(By.XPATH, r'//*[@id="search.keyword.query"]')
        search_box.send_keys(search_address)
        driver.find_element(By.XPATH, r'//*[@id="search.keyword.submit"]').send_keys(Keys.ENTER)

        # 일정 시간 대기 (지도가 로드되기를 기다리기 위해)
        wait_for_results(driver)

        checkInput = input("종료를 원하신다면 Enter를 누르세요.")
        if checkInput == '':
            driver.quit()

